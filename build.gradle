plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/generated/resources'
			]
		}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/camping.accesswidener")
	runs {
		data {
			server()
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
	//		vmArg "-Dfabric-api.datagen.strict-validation"
			vmArg "-Dfabric-api.datagen.modid=camping"
			ideConfigGenerated = true
			runDir "build/datagen"
		}
	}
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/'
	}
	maven { url = 'https://maven.minecraftforge.net/' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	modImplementation 'com.github.glitchfiend:TerraBlender-fabric:1.18.2-1.1.0.95'
	//include modImplementation("com.terraformersmc.terraform-api:terraform-biome-builder-api-v1:2.0.0")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
	}
}
